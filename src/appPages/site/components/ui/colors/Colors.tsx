"use client";
import { FC } from "react";

interface IClothesImg {
  photo: string;
  color: string;
}
interface IPropsColors {
  clothesImg: IClothesImg[];
}
const ColorsClothes: FC<IPropsColors> = ({ clothesImg }) => {
  console.log("üöÄ ~ clothesImg:", clothesImg);

  const getColor = (color: string) => {
    switch (color) {
      case "—Å–µ—Ä—ã–π":
        return "gray";
      case "–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π":
        return "brown";
      case "—Å–∏–Ω–∏–π":
        return "blue";
      case "–∑–µ–ª–µ–Ω—ã–π":
        return "green";
      case "–∫—Ä–∞—Å–Ω—ã–π":
        return "red";
      case "–∂–µ–ª—Ç—ã–π":
        return "yellow";
      case "–æ—Ä–∞–Ω–∂–µ–≤—ã–π":
        return "orange";
      case "—á–µ—Ä–Ω—ã–π":
        return "black";
      case "–±–µ–ª—ã–π":
        return "white";
      case "—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π":
        return "purple";
      case "—Ä–æ–∑–æ–≤—ã–π":
        return "pink";
      case "–≥–æ–ª—É–±–æ–π":
        return "lightblue";
      case "–±–∏—Ä—é–∑–æ–≤—ã–π":
        return "turquoise";
      case "–±–µ–∂–µ–≤—ã–π":
        return "beige";
      case "–∑–æ–ª–æ—Ç–æ–π":
        return "gold";
      case "—Å–µ—Ä–µ–±—Ä—è–Ω—ã–π":
        return "silver";
      case "–±–æ—Ä–¥–æ–≤—ã–π":
        return "maroon";
      default:
        return "transparent";
    }
  };

  return (
    <div style={{ display: "flex", gap: "10px" }}>
      {clothesImg.map((item, index) => (
        <div
          key={index}
          style={{
            width: "20px",
            height: "20px",
            borderRadius: "50%",
            backgroundColor: getColor(item.color),
            border: "1px solid black",
          }}
          title={item.color} // –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        ></div>
      ))}
    </div>
  );
};

export default ColorsClothes;
